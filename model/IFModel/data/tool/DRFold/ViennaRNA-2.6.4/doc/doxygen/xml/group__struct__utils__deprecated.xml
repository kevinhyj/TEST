<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="group__struct__utils__deprecated" kind="group">
    <compoundname>struct_utils_deprecated</compoundname>
    <title>Deprecated Interface for Secondary Structure Utilities</title>
    <innerfile refid="RNAstruct_8h">RNAstruct.h</innerfile>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__struct__utils__deprecated_1ga3f31e0e48125601bfa57b52f8b038e8e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int loop_size[STRUC]</definition>
        <argsstring>[STRUC]</argsstring>
        <name>loop_size</name>
        <briefdescription>
<para>contains a list of all loop sizes. loop_size[0] contains the number of external bases. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="170" column="13" declfile="ViennaRNA/RNAstruct.h" declline="170" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="group__struct__utils__deprecated_1ga8218c0d581a3fba2a1a56a196abe19a5" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int helix_size[STRUC]</definition>
        <argsstring>[STRUC]</argsstring>
        <name>helix_size</name>
        <briefdescription>
<para>contains a list of all stack sizes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="176" column="13" declfile="ViennaRNA/RNAstruct.h" declline="176" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="group__struct__utils__deprecated_1gaef14e2f8ab3f61e8e659ba6b9003b08a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int loop_degree[STRUC]</definition>
        <argsstring>[STRUC]</argsstring>
        <name>loop_degree</name>
        <briefdescription>
<para>contains the corresponding list of loop degrees. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="182" column="13" declfile="ViennaRNA/RNAstruct.h" declline="182" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="group__struct__utils__deprecated_1ga439fcb9f8d4f9f4d2227fde5fbfecb30" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int loops</definition>
        <argsstring></argsstring>
        <name>loops</name>
        <briefdescription>
<para>contains the number of loops ( and therefore of stacks ). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="188" column="13" declfile="ViennaRNA/RNAstruct.h" declline="188" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="group__struct__utils__deprecated_1gadd2f952597e02d66e1116a9d11d252d6" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int unpaired</definition>
        <argsstring></argsstring>
        <name>unpaired</name>
        <briefdescription>
<para>contains the number of unpaired bases. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="194" column="13" declfile="ViennaRNA/RNAstruct.h" declline="194" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="group__struct__utils__deprecated_1ga6341cbb704924824e0236c1dce791032" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int pairs</definition>
        <argsstring></argsstring>
        <name>pairs</name>
        <briefdescription>
<para>contains the number of base pairs in the last parsed structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="200" column="13" declfile="ViennaRNA/RNAstruct.h" declline="200" declcolumn="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__struct__utils__deprecated_1gab3fcb3ff7e9bcd86cd969093bdae0c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * b2HIT</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>b2HIT</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Converts the full structure from bracket notation to the HIT notation including root. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000131"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See <ref refid="group__struct__utils__tree_1ga6a315cabbaf0868d640dfc9d922f0393" kindref="member">vrna_db_to_tree_string()</ref> and <ref refid="group__struct__utils__tree_1ga3ad5609bc93ef20034c3ab989365c1f0" kindref="member">VRNA_STRUCTURE_TREE_HIT</ref> for a replacement</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="53" column="7" declfile="ViennaRNA/RNAstruct.h" declline="53" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gaab548531941f27c91108b89a8f570f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * b2C</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>b2C</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Converts the full structure from bracket notation to the a coarse grained notation using the &apos;H&apos; &apos;B&apos; &apos;I&apos; &apos;M&apos; and &apos;R&apos; identifiers. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000132"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See <ref refid="group__struct__utils__tree_1ga6a315cabbaf0868d640dfc9d922f0393" kindref="member">vrna_db_to_tree_string()</ref> and <ref refid="group__struct__utils__tree_1ga549e259a963d77e2d5b7e14083fc016e" kindref="member">VRNA_STRUCTURE_TREE_SHAPIRO_SHORT</ref> for a replacement</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="67" column="7" declfile="ViennaRNA/RNAstruct.h" declline="67" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga2baf1c3a2182f21a4384107df979cd67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * b2Shapiro</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>b2Shapiro</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Converts the full structure from bracket notation to the <emphasis>weighted</emphasis> coarse grained notation using the &apos;H&apos; &apos;B&apos; &apos;I&apos; &apos;M&apos; &apos;S&apos; &apos;E&apos; and &apos;R&apos; identifiers. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000133"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See <ref refid="group__struct__utils__tree_1ga6a315cabbaf0868d640dfc9d922f0393" kindref="member">vrna_db_to_tree_string()</ref> and <ref refid="group__struct__utils__tree_1ga91f2e3a3a502d5445fd7fe5983a5fe92" kindref="member">VRNA_STRUCTURE_TREE_SHAPIRO_WEIGHT</ref> for a replacement</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="82" column="7" declfile="ViennaRNA/RNAstruct.h" declline="82" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gaf3b80d1fe7485e69c6eb85965613a145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * add_root</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>add_root</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Adds a root to an un-rooted tree in any except bracket notation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="92" column="7" declfile="ViennaRNA/RNAstruct.h" declline="92" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga04c7268dcc798f92290604a762c3ddf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * expand_Shapiro</definition>
        <argsstring>(const char *coarse)</argsstring>
        <name>expand_Shapiro</name>
        <param>
          <type>const char *</type>
          <declname>coarse</declname>
        </param>
        <briefdescription>
<para>Inserts missing &apos;S&apos; identifiers in unweighted coarse grained structures as obtained from <ref refid="group__struct__utils__deprecated_1gaab548531941f27c91108b89a8f570f95" kindref="member">b2C()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coarse</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="103" column="7" declfile="ViennaRNA/RNAstruct.h" declline="103" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga6eea10bca410a57aaffcdea7bcf89bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * expand_Full</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>expand_Full</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Convert the full structure from bracket notation to the expanded notation including root. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="115" column="7" declfile="ViennaRNA/RNAstruct.h" declline="115" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gad67c8ef662c147c5f55da3c233376e59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * unexpand_Full</definition>
        <argsstring>(const char *ffull)</argsstring>
        <name>unexpand_Full</name>
        <param>
          <type>const char *</type>
          <declname>ffull</declname>
        </param>
        <briefdescription>
<para>Restores the bracket notation from an expanded full or HIT tree, that is any tree using only identifiers &apos;U&apos; &apos;P&apos; and &apos;R&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ffull</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="126" column="7" declfile="ViennaRNA/RNAstruct.h" declline="126" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga4921d8967002f8e6e30a8ac046bbf557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * unweight</definition>
        <argsstring>(const char *wcoarse)</argsstring>
        <name>unweight</name>
        <param>
          <type>const char *</type>
          <declname>wcoarse</declname>
        </param>
        <briefdescription>
<para>Strip weights from any weighted tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wcoarse</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="136" column="7" declfile="ViennaRNA/RNAstruct.h" declline="136" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga1054c4477d53b31d79d4cb132100e87a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void unexpand_aligned_F</definition>
        <argsstring>(char *align[2])</argsstring>
        <name>unexpand_aligned_F</name>
        <param>
          <type>char *</type>
          <declname>align</declname>
          <array>[2]</array>
        </param>
        <briefdescription>
<para>Converts two aligned structures in expanded notation. </para>
        </briefdescription>
        <detaileddescription>
<para>Takes two aligned structures as produced by <ref refid="treedist_8h_1a3b21f1925f7071f46d93431a835217bb" kindref="member">tree_edit_distance()</ref> function back to bracket notation with &apos;_&apos; as the gap character. The result overwrites the input.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>align</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="149" column="9" declfile="ViennaRNA/RNAstruct.h" declline="149" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga3c79042e6bf6f01706bf30ec9e69e8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse_structure</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>parse_structure</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Collects a statistic of structure elements of the full structure in bracket notation. </para>
        </briefdescription>
        <detaileddescription>
<para>The function writes to the following global variables: <ref refid="group__struct__utils__deprecated_1ga3f31e0e48125601bfa57b52f8b038e8e" kindref="member">loop_size</ref>, <ref refid="group__struct__utils__deprecated_1gaef14e2f8ab3f61e8e659ba6b9003b08a" kindref="member">loop_degree</ref>, <ref refid="group__struct__utils__deprecated_1ga8218c0d581a3fba2a1a56a196abe19a5" kindref="member">helix_size</ref>, <ref refid="group__struct__utils__deprecated_1ga439fcb9f8d4f9f4d2227fde5fbfecb30" kindref="member">loops</ref>, <ref refid="group__struct__utils__deprecated_1ga6341cbb704924824e0236c1dce791032" kindref="member">pairs</ref>, <ref refid="group__struct__utils__deprecated_1gadd2f952597e02d66e1116a9d11d252d6" kindref="member">unpaired</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="162" column="9" declfile="ViennaRNA/RNAstruct.h" declline="162" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga99e8565f0e7eb7c59a100841d50d7ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * pack_structure</definition>
        <argsstring>(const char *struc)</argsstring>
        <name>pack_structure</name>
        <param>
          <type>const char *</type>
          <declname>struc</declname>
        </param>
        <briefdescription>
<para>Pack secondary secondary structure, 5:1 compression using base 3 encoding. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a binary string encoding of the secondary structure using a 5:1 compression scheme. The string is NULL terminated and can therefore be used with standard string functions such as strcmp(). Useful for programs that need to keep many structures in memory.</para>
<para><xrefsect id="deprecated_1_deprecated000201"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__dot__bracket_1ga9db9613100e9f750017d3e13a874bb7d" kindref="member">vrna_db_pack()</ref> as a replacement</para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struc</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The binary encoded structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="897" column="7" declfile="ViennaRNA/utils/structures.h" declline="897" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga288130063fdf28acbe3c2ce3e826cf4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * unpack_structure</definition>
        <argsstring>(const char *packed)</argsstring>
        <name>unpack_structure</name>
        <param>
          <type>const char *</type>
          <declname>packed</declname>
        </param>
        <briefdescription>
<para>Unpack secondary structure previously packed with <ref refid="group__struct__utils__deprecated_1ga99e8565f0e7eb7c59a100841d50d7ee5" kindref="member">pack_structure()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Translate a compressed binary string produced by <ref refid="group__struct__utils__deprecated_1ga99e8565f0e7eb7c59a100841d50d7ee5" kindref="member">pack_structure()</ref> back into the familiar dot-bracket notation.</para>
<para><xrefsect id="deprecated_1_deprecated000202"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__dot__bracket_1ga9c8c7296b5bb75f7d32c20dc004eb723" kindref="member">vrna_db_unpack()</ref> as a replacement</para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packed</parametername>
</parameternamelist>
<parameterdescription>
<para>The binary encoded packed secondary structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The unpacked secondary structure in dot-bracket notation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="911" column="7" declfile="ViennaRNA/utils/structures.h" declline="911" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gab037d0de2e4c3d6a3f1d51b5b22315dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short * make_pair_table</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>make_pair_table</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Create a pair table of a secondary structure. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a newly allocated table, such that table[i]=j if (i.j) pair or 0 if i is unpaired, table[0] contains the length of the structure.</para>
<para><xrefsect id="deprecated_1_deprecated000203"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref> instead </para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created pair_table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="926" column="8" declfile="ViennaRNA/utils/structures.h" declline="926" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga1ce48c7bbd7d1d1429124abfe3ee68fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short * copy_pair_table</definition>
        <argsstring>(const short *pt)</argsstring>
        <name>copy_pair_table</name>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Get an exact copy of a pair table. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000204"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__pair__table_1gae59fd97f2f076d4e8897394e34ff935d" kindref="member">vrna_ptable_copy()</ref> instead </para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The pair table to be copied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the copy of &apos;pt&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="941" column="8" declfile="ViennaRNA/utils/structures.h" declline="941" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga7de27e1761e844061a7bdc704124614a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short * alimake_pair_table</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>alimake_pair_table</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pair table for snoop align</para>
<para><xrefsect id="deprecated_1_deprecated000205"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__pair__table_1ga7b2fb019d2e5f17e40d5cfa8e30a4607" kindref="member">vrna_pt_ali_get()</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="950" column="8" declfile="ViennaRNA/utils/structures.h" declline="950" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gab52c17083d021494b64820302be07039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short * make_pair_table_snoop</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>make_pair_table_snoop</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns a newly allocated table, such that: table[i]=j if (i.j) pair or 0 if i is unpaired, table[0] contains the length of the structure. The special pseudoknotted H/ACA-mRNA structure is taken into account. <xrefsect id="deprecated_1_deprecated000206"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__pair__table_1ga325b0bfa1a4f1a186c917d2fa3777396" kindref="member">vrna_pt_snoop_get()</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="960" column="8" declfile="ViennaRNA/utils/structures.h" declline="960" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga6ebbcd29a754f0e4f1a66d1fd84184db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bp_distance</definition>
        <argsstring>(const char *str1, const char *str2)</argsstring>
        <name>bp_distance</name>
        <param>
          <type>const char *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str2</declname>
        </param>
        <briefdescription>
<para>Compute the &quot;base pair&quot; distance between two secondary structures s1 and s2. </para>
        </briefdescription>
        <detaileddescription>
<para>The sequences should have the same length. dist = number of base pairs in one structure but not in the other same as edit distance with open-pair close-pair as move-set</para>
<para><xrefsect id="deprecated_1_deprecated000207"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use vrna_bp_distance instead</para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>First structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The base pair distance between str1 and str2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="980" column="6" declfile="ViennaRNA/utils/structures.h" declline="980" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gafd6aece250daccb89923db327a81e904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int *</type>
        <definition>unsigned int * make_referenceBP_array</definition>
        <argsstring>(short *reference_pt, unsigned int turn)</argsstring>
        <name>make_referenceBP_array</name>
        <param>
          <type>short *</type>
          <declname>reference_pt</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>turn</declname>
        </param>
        <briefdescription>
<para>Make a reference base pair count matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Get an upper triangular matrix containing the number of basepairs of a reference structure for each interval [i,j] with i&lt;j. Access it via iindx!!!</para>
<para><xrefsect id="deprecated_1_deprecated000208"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils_1gad5e50b8d4f6837ad15ab784738682147" kindref="member">vrna_refBPcnt_matrix()</ref> instead</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="993" column="15" declfile="ViennaRNA/utils/structures.h" declline="993" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gafd74239e8e76c01419116d9d4a50e700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int *</type>
        <definition>unsigned int * compute_BPdifferences</definition>
        <argsstring>(short *pt1, short *pt2, unsigned int turn)</argsstring>
        <name>compute_BPdifferences</name>
        <param>
          <type>short *</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>pt2</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>turn</declname>
        </param>
        <briefdescription>
<para>Make a reference base pair distance matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Get an upper triangular matrix containing the base pair distance of two reference structures for each interval [i,j] with i&lt;j. Access it via iindx!!!</para>
<para><xrefsect id="deprecated_1_deprecated000209"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils_1ga7f4b0443a4fb67c924532895757d9496" kindref="member">vrna_refBPdist_matrix()</ref> instead</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1007" column="15" declfile="ViennaRNA/utils/structures.h" declline="1007" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gadf0ad2d46c9ca7b850437d1b79627a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parenthesis_structure</definition>
        <argsstring>(char *structure, vrna_bp_stack_t *bp, int length)</argsstring>
        <name>parenthesis_structure</name>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1gaa651bda42e7692f08cb603cd6834b0ee" kindref="member">vrna_bp_stack_t</ref> *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Create a dot-backet/parenthesis structure from backtracking stack. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000211"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use vrna_parenthesis_structure() instead </para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>This function is threadsafe </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1046" column="7" declfile="ViennaRNA/utils/structures.h" declline="1046" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gab9c5c8311bd5120900585d4fa50c2df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parenthesis_zuker</definition>
        <argsstring>(char *structure, vrna_bp_stack_t *bp, int length)</argsstring>
        <name>parenthesis_zuker</name>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1gaa651bda42e7692f08cb603cd6834b0ee" kindref="member">vrna_bp_stack_t</ref> *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Create a dot-backet/parenthesis structure from backtracking stack obtained by zuker suboptimal calculation in cofold.c. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000212"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use vrna_parenthesis_zuker instead </para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>This function is threadsafe </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1060" column="7" declfile="ViennaRNA/utils/structures.h" declline="1060" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga129d81c4a1ead793c5b2311333e03dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bppm_to_structure</definition>
        <argsstring>(char *structure, FLT_OR_DBL *pr, unsigned int length)</argsstring>
        <name>bppm_to_structure</name>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
          <declname>pr</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Create a dot-bracket like structure string from base pair probability matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000213"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils_1gacb5f1fafaf20eaf6a63052153499f0bb" kindref="member">vrna_db_from_probs()</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1075" column="8" declfile="ViennaRNA/utils/structures.h" declline="1075" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga49962ad6242b8c628de6ca16bb831c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char bppm_symbol</definition>
        <argsstring>(const float *x)</argsstring>
        <name>bppm_symbol</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Get a pseudo dot bracket notation for a given probability information. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000214"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils_1ga025bff1b27fa46534c8fae6980f64bb5" kindref="member">vrna_bpp_symbol()</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1083" column="10" declfile="ViennaRNA/utils/structures.h" declline="1083" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__struct__utils__deprecated_1gaa100f7d3ce0ad4f527a61c5764ebf277" prot="public" static="no">
        <name>STRUC</name>
        <initializer>2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/RNAstruct.h" line="40" column="9" bodyfile="ViennaRNA/RNAstruct.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
